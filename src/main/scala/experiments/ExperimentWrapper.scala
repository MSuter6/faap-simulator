package experiments

import io.PathHandler
import io.visualization.PlotWriterConfig
import simulator.generation.FaapProblemGenerator

/**
  * Contains all artifacts generated by a Experiment and can be imported with the [[io.imports.ExperimentImporter]]
  */
case class ExperimentWrapper(experimentConfig: ExperimentConfig,
                             faapProblemInstancesConfiguration: FaapProblemInstancesConfiguration,
                             faapProblemGenerator: FaapProblemGenerator,
                             experimentIterations: Seq[ExperimentIteration], pathHandler: PathHandler = PathHandler()) {
  /**
    * Use a new PlotWriterConfig
    * @param config New plot configuration
    * @return [[experiments.ExperimentWrapper]] with the new config
    */
  def using(config: PlotWriterConfig): ExperimentWrapper = {
    using(experimentConfig using config)
  }

  /**
    * Use a new ExperimentConfig
    * @param config New experiment configuration
    * @return [[experiments.ExperimentWrapper]] with the new config
    */
  def using(config: ExperimentConfig): ExperimentWrapper = {
    ExperimentWrapper(config, faapProblemInstancesConfiguration, faapProblemGenerator, experimentIterations, pathHandler)
  }

  /**
    * Merges two experiment wrappers together combining the allocators and problem instances and using the
    * configs from the first experiment.
    * @return Merged ExperimentWrapper
    */
  def join(secondExperiment: ExperimentWrapper): ExperimentWrapper = {
    Utils.check(experimentConfig equals secondExperiment.experimentConfig, "Exp configs don't match")

    val newExperimentConfig = ExperimentConfig(experimentConfig.id,
      experimentConfig.seed,
      (experimentConfig.allocators ++ secondExperiment.experimentConfig.allocators).distinct,
      experimentConfig.evalMethod,
      experimentConfig.plotWriterConfig
    )

    val newExperimentIterations = (experimentIterations ++ secondExperiment.experimentIterations).distinct

    ExperimentWrapper(newExperimentConfig, faapProblemInstancesConfiguration, faapProblemGenerator, newExperimentIterations, pathHandler)
  }

  /**
    * Use a new path handler.
    * @param pathHandler New PathHandler
    * @return ExperimentWrapper with new PathHandler
    */
  def withPathHandler(pathHandler: PathHandler): ExperimentWrapper = {
    ExperimentWrapper(experimentConfig, faapProblemInstancesConfiguration, faapProblemGenerator, experimentIterations, pathHandler)
  }
}